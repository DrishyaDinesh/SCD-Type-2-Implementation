//Creating Input Table which stores details of all the tables for which SCD is to be executed

create or replace table input_table(src_table STRING, lkp_table STRING, tgt_table STRING, chng_col STRING, key STRING, colnames ARRAY, trsfrm_rule STRING, trsfrm_res_col STRING, load_type STRING); 

insert into input_table select 'employee','employee_lkp','employee_final_tgt','dept','emp_id',array_construct('name','dept'),’ col("tgt_emp_id")+lit(200)’, ‘UPDATED_EMP_ID’,’ SCDTYPE2’;

insert into input_table select 'customer','customer_trg','cust_final_trg','email','cust_id',array_construct('name','age','gender','email'), ’ concat(concat(col("tgt_name"),lit("#")),col("tgt_cust_id"))’, ’ CONCAT_RESULT’, ‘Scdtype2’;

select * from input_table;


//Create a Stored Procedure to extract values from the input table and call ext_SCD procedure for all the tables

create or replace procedure SCD_Implementation()
returns STRING
language sql
as
$$
  declare
    c1 cursor for select * from input_table;
    srtable STRING;
    lptable STRING;
    trtable STRING;
    ldtype STRING;
    chcol STRING;
    key STRING;
    colnames ARRAY;
    trs_rule STRING;
    trs_col STRING;
  begin
    open c1;
    for record in c1 do
      srtable := record.src_table;
      lptable :=record.lkp_table;
      trtable := record.tgt_table;
      ldtype := record.load_type;
      chcol := record.chng_col;
      key := record.key;
      colnames := record.colnames;
      trs_rule := record.trsfrm_rule;
      trs_col := record.trsfrm_res_col;
      call ext_SCD(:srtable,:lptable,:trtable,:ldtype,:chcol,:key,:colnames,:trs_rule,:trs_col);
    end for;
    return 'Transformations Implemented successfully for all the tables in input_table';
  end;
$$
;
call SCD_Implementation();
